[{"C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\index.js":"1","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\App.js":"2","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\reportWebVitals.js":"3","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\Main.js":"4","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\check.js":"5","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\canMove.js":"6","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\checkmate.js":"7","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\stalemate.js":"8"},{"size":517,"mtime":1613784844295,"results":"9","hashOfConfig":"10"},{"size":181,"mtime":1613784844293,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1613784844295,"results":"12","hashOfConfig":"10"},{"size":8738,"mtime":1619389196210,"results":"13","hashOfConfig":"10"},{"size":658,"mtime":1613784844295,"results":"14","hashOfConfig":"10"},{"size":5046,"mtime":1613784844295,"results":"15","hashOfConfig":"10"},{"size":654,"mtime":1613784844295,"results":"16","hashOfConfig":"10"},{"size":923,"mtime":1613784844295,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"iz7t3c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\index.js",[],["39","40"],"C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\App.js",[],"C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\reportWebVitals.js",[],"C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\Main.js",[],"C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\check.js",["41","42","43","44"],"import {canMove} from './canMove';\r\n\r\nexport const check = function(board, turn){\r\n  var isCheck = false\r\n  var kingPos = []\r\n\r\n  /*finds position of king*/\r\n  for(let i = 0; i <= 7; i++){\r\n    for(let j = 0; j <= 7; j++){\r\n      if(board[i][j][0] !== turn[0] && board[i][j][1] === 'K'){\r\n        kingPos.push(i)\r\n        kingPos.push(j)\r\n      }\r\n    }\r\n  }\r\n\r\n  /*cycles through each piece to see if it can move to king's position*/\r\n  for(let k = 0; k <= 7; k++){\r\n    for(let m = 0; m <= 7; m++){\r\n      if(canMove(board, k, m, kingPos[0], kingPos[1],turn, true, [[, [,]], [, [,]]])){\r\n        isCheck = true\r\n      }\r\n    }\r\n  }\r\n\r\n  return isCheck\r\n}\r\n","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\canMove.js",["45","46","47","48","49"],"import {check} from './check';\r\n\r\nexport const canMove = function(board, k, m, i, j, turn, endOfTurn, canCastle) {\r\n\r\n  if (board[i][j][0] === board[k][m][0]) {\r\n    return false\r\n  }\r\n\r\n  var canMove = false\r\n  switch (board[k][m][1]) {\r\n    /*Pawn*/\r\n    case 'P':\r\n      if (m === j && board[i][j] === ' ') {\r\n        if (board[k][m][0] === 'B') {\r\n          if (i === k - 1 || (i === k - 2 && k === 6)) {\r\n            canMove = true\r\n          }\r\n        } else {\r\n          if (i === k + 1 || (i === k + 2 && k === 1)) {\r\n            canMove = true\r\n          }\r\n        }\r\n      }\r\n      if (m === j + 1 || m === j - 1) {\r\n        if (board[k][m][0] === 'B' && board[i][j][0] === 'W' && i === k - 1) {\r\n          canMove = true\r\n        } else if (board[k][m][0] === 'W' && board[i][j][0] === 'B' && i === k + 1) {\r\n          canMove = true\r\n        }\r\n      }\r\n\r\n      break\r\n\r\n      /*Rook*/\r\n    case 'R':\r\n      var change = 1\r\n      if (k === i) {\r\n        if (m === j) {\r\n          break\r\n        }\r\n        if (m > j) {\r\n          change = -1\r\n        }\r\n        canMove = true\r\n        for (let n = m + change; n !== j; n += change) {\r\n          if (board[i][n] === ' ') {\r\n            canMove = true\r\n          } else {\r\n            canMove = false\r\n            break\r\n          }\r\n        }\r\n      } else if (m === j) {\r\n        if (k > i) {\r\n          change = -1\r\n        }\r\n        canMove = true\r\n        for (let n = k + change; n !== i; n += change) {\r\n          if (board[n][j] === ' ') {\r\n            canMove = true\r\n          } else {\r\n            canMove = false\r\n            break\r\n          }\r\n        }\r\n      }\r\n      break\r\n\r\n      /*Knight*/\r\n    case 'N':\r\n      var rowDiff = Math.abs(i - k)\r\n      var colDiff = Math.abs(j - m)\r\n\r\n      if ((rowDiff === 1 && colDiff === 2) || (rowDiff === 2 && colDiff === 1)) {\r\n        canMove = true\r\n      }\r\n      break\r\n\r\n      /*Bishop*/\r\n    case 'B':\r\n      if (Math.abs(i - k) === Math.abs(j - m) && Math.abs(i - k) !== 0) {\r\n        canMove = true\r\n        var rowChange = 1\r\n        var colChange = 1\r\n        if (i < k) {\r\n          rowChange = -1\r\n        }\r\n        if (j < m) {\r\n          colChange = -1\r\n        }\r\n\r\n        var rowSpot = k + rowChange\r\n        var colSpot = m + colChange\r\n        while (rowSpot !== i) {\r\n          if (board[rowSpot][colSpot] !== ' ') {\r\n            canMove = false\r\n          }\r\n          rowSpot += rowChange\r\n          colSpot += colChange\r\n        }\r\n      }\r\n      break\r\n\r\n      /*Queen*/\r\n    case 'Q':\r\n      if (Math.abs(i - k) === Math.abs(j - m) && Math.abs(i - k) !== 0) {\r\n        canMove = true\r\n        var rowChange = 1\r\n        var colChange = 1\r\n        if (i < k) {\r\n          rowChange = -1\r\n        }\r\n        if (j < m) {\r\n          colChange = -1\r\n        }\r\n\r\n        var rowSpot = k + rowChange\r\n        var colSpot = m + colChange\r\n        while (rowSpot !== i) {\r\n          if (board[rowSpot][colSpot] !== ' ') {\r\n            canMove = false\r\n          }\r\n          rowSpot += rowChange\r\n          colSpot += colChange\r\n        }\r\n      }\r\n      if (!canMove) {\r\n        var change = 1\r\n        if (k === i) {\r\n          if (m === j) {\r\n            break\r\n          }\r\n          if (m > j) {\r\n            change = -1\r\n          }\r\n          canMove = true\r\n          for (let n = m + change; n !== j; n += change) {\r\n            if (board[i][n] === ' ') {\r\n              canMove = true\r\n            } else {\r\n              canMove = false\r\n              break\r\n            }\r\n          }\r\n        } else if (m === j) {\r\n          if (k > i) {\r\n            change = -1\r\n          }\r\n          canMove = true\r\n          for (let n = k + change; n !== i; n += change) {\r\n            if (board[n][j] === ' ') {\r\n              canMove = true\r\n            } else {\r\n              canMove = false\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n      break\r\n\r\n      /*King*/\r\n    case 'K':\r\n      if (Math.abs(i - k) <= 1 && Math.abs(j - m) <= 1) {\r\n        canMove = true\r\n      }\r\n\r\n      /*castling*/\r\n      var place = 1\r\n      if(board[k][m][0] === 'W'){\r\n        place = 0\r\n      }\r\n      if(canCastle[place][0]){\r\n        if(j === 2 && canCastle[place][1][0] && board[place * 7][1] === ' ' && board[place * 7][2] === ' ' && board[place * 7][3] === ' '){\r\n          canMove = true\r\n        }\r\n        if(j === 6 && canCastle[place][1][1] && board[place * 7][5] === ' ' && board[place * 7][6] === ' '){\r\n          canMove = true\r\n        }\r\n      }\r\n\r\n      break;\r\n\r\n    default:\r\n      break\r\n  }\r\n\r\n\r\n  /*checks if this move would put their own king into check*/\r\n  if(!endOfTurn){\r\n    var tempBoard = []\r\n    for(let i = 0; i <= 7; i++){\r\n      tempBoard.push([...board[i]])\r\n    }\r\n    tempBoard[i][j] = tempBoard[k][m]\r\n    tempBoard[k][m] = ' '\r\n\r\n    var tempTurn\r\n    if(turn === 'White'){\r\n      tempTurn = 'Black'\r\n    } else {\r\n      tempTurn = 'White'\r\n    }\r\n\r\n    if(check(tempBoard, tempTurn)){\r\n      canMove = false\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  return canMove\r\n}\r\n","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\checkmate.js",["50","51","52","53"],"import {canMove} from './canMove';\r\n\r\nexport const checkmate = function(board, turn){\r\n\r\n  var tempTurn = 'White'\r\n  if(turn === 'White'){\r\n    tempTurn = 'Black'\r\n  }\r\n\r\n  /*will search through and see if any piece can make a move that gets out of check*/\r\n  for(let i = 0; i <= 7; i++){\r\n    for(let j = 0; j <= 7; j++){\r\n      if(board[i][j] !== ' ' && board[i][j][0] !== turn[0]){\r\n        for(let k = 0; k <= 7; k++){\r\n          for(let m = 0; m <= 7; m++){\r\n            if(canMove(board, i, j, k, m, tempTurn, false, [[, [,]], [, [,]]])){\r\n              return false\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n","C:\\Users\\paulm\\OneDrive\\Documents\\GitHub\\Chess\\src\\stalemate.js",["54","55","56","57"],"import {canMove} from './canMove';\r\n\r\nexport const stalemate = function(board, turn){\r\n\r\n  var tempTurn = 'White'\r\n  if(turn === 'White'){\r\n    tempTurn = 'Black'\r\n  }\r\n\r\n  var pieceCount = 0\r\n  /*checks to see if kings are only pieces left*/\r\n  for(let i = 0; i <= 7; i++){\r\n    for(let j = 0; j <= 7; j++){\r\n      if(board[i][j] !== ' '){\r\n        pieceCount++\r\n      }\r\n    }\r\n  }\r\n\r\n  if(pieceCount === 2){\r\n    return true\r\n  }\r\n\r\n  /*will search through and see if any piece can make a move that gets out of check*/\r\n  for(let i = 0; i <= 7; i++){\r\n    for(let j = 0; j <= 7; j++){\r\n      if(board[i][j] !== ' ' && board[i][j][0] !== turn[0]){\r\n        for(let k = 0; k <= 7; k++){\r\n          for(let m = 0; m <= 7; m++){\r\n            if(canMove(board, i, j, k, m, tempTurn, false, [[, [,]], [, [,]]])){\r\n              return false\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return true\r\n}\r\n",{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":20,"column":67,"nodeType":"64","messageId":"65","endLine":20,"endColumn":74},{"ruleId":"62","severity":1,"message":"63","line":20,"column":70,"nodeType":"64","messageId":"65","endLine":20,"endColumn":73},{"ruleId":"62","severity":1,"message":"63","line":20,"column":76,"nodeType":"64","messageId":"65","endLine":20,"endColumn":83},{"ruleId":"62","severity":1,"message":"63","line":20,"column":79,"nodeType":"64","messageId":"65","endLine":20,"endColumn":82},{"ruleId":"66","severity":1,"message":"67","line":108,"column":13,"nodeType":"68","messageId":"69","endLine":108,"endColumn":22},{"ruleId":"66","severity":1,"message":"70","line":109,"column":13,"nodeType":"68","messageId":"69","endLine":109,"endColumn":22},{"ruleId":"66","severity":1,"message":"71","line":117,"column":13,"nodeType":"68","messageId":"69","endLine":117,"endColumn":20},{"ruleId":"66","severity":1,"message":"72","line":118,"column":13,"nodeType":"68","messageId":"69","endLine":118,"endColumn":20},{"ruleId":"66","severity":1,"message":"73","line":128,"column":13,"nodeType":"68","messageId":"69","endLine":128,"endColumn":19},{"ruleId":"62","severity":1,"message":"63","line":16,"column":61,"nodeType":"64","messageId":"65","endLine":16,"endColumn":68},{"ruleId":"62","severity":1,"message":"63","line":16,"column":64,"nodeType":"64","messageId":"65","endLine":16,"endColumn":67},{"ruleId":"62","severity":1,"message":"63","line":16,"column":70,"nodeType":"64","messageId":"65","endLine":16,"endColumn":77},{"ruleId":"62","severity":1,"message":"63","line":16,"column":73,"nodeType":"64","messageId":"65","endLine":16,"endColumn":76},{"ruleId":"62","severity":1,"message":"63","line":30,"column":61,"nodeType":"64","messageId":"65","endLine":30,"endColumn":68},{"ruleId":"62","severity":1,"message":"63","line":30,"column":64,"nodeType":"64","messageId":"65","endLine":30,"endColumn":67},{"ruleId":"62","severity":1,"message":"63","line":30,"column":70,"nodeType":"64","messageId":"65","endLine":30,"endColumn":77},{"ruleId":"62","severity":1,"message":"63","line":30,"column":73,"nodeType":"64","messageId":"65","endLine":30,"endColumn":76},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","no-redeclare","'rowChange' is already defined.","Identifier","redeclared","'colChange' is already defined.","'rowSpot' is already defined.","'colSpot' is already defined.","'change' is already defined.","no-global-assign","no-unsafe-negation"]