{"ast":null,"code":"import{canMove}from'./canMove';export var check=function check(board,turn){var isCheck=false;var kingPos=[];/*finds position of king*/for(var i=0;i<=7;i++){for(var j=0;j<=7;j++){if(board[i][j][0]!==turn[0]&&board[i][j][1]==='K'){kingPos.push(i);kingPos.push(j);}}}/*cycles through each piece to see if it can move to king's position*/for(var k=0;k<=7;k++){for(var m=0;m<=7;m++){if(canMove(board,k,m,kingPos[0],kingPos[1],turn,true,[[,[,]],[,[,]]])){isCheck=true;}}}return isCheck;};","map":{"version":3,"sources":["C:/Users/paulm/OneDrive/Documents/GitHub/Chess/src/check.js"],"names":["canMove","check","board","turn","isCheck","kingPos","i","j","push","k","m"],"mappings":"AAAA,OAAQA,OAAR,KAAsB,WAAtB,CAEA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAASC,KAAT,CAAgBC,IAAhB,CAAqB,CACxC,GAAIC,CAAAA,OAAO,CAAG,KAAd,CACA,GAAIC,CAAAA,OAAO,CAAG,EAAd,CAEA,0BACA,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,EAAI,CAApB,CAAuBA,CAAC,EAAxB,CAA2B,CACzB,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,EAAI,CAApB,CAAuBA,CAAC,EAAxB,CAA2B,CACzB,GAAGL,KAAK,CAACI,CAAD,CAAL,CAASC,CAAT,EAAY,CAAZ,IAAmBJ,IAAI,CAAC,CAAD,CAAvB,EAA8BD,KAAK,CAACI,CAAD,CAAL,CAASC,CAAT,EAAY,CAAZ,IAAmB,GAApD,CAAwD,CACtDF,OAAO,CAACG,IAAR,CAAaF,CAAb,EACAD,OAAO,CAACG,IAAR,CAAaD,CAAb,EACD,CACF,CACF,CAED,sEACA,IAAI,GAAIE,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,EAAI,CAApB,CAAuBA,CAAC,EAAxB,CAA2B,CACzB,IAAI,GAAIC,CAAAA,CAAC,CAAG,CAAZ,CAAeA,CAAC,EAAI,CAApB,CAAuBA,CAAC,EAAxB,CAA2B,CACzB,GAAGV,OAAO,CAACE,KAAD,CAAQO,CAAR,CAAWC,CAAX,CAAcL,OAAO,CAAC,CAAD,CAArB,CAA0BA,OAAO,CAAC,CAAD,CAAjC,CAAqCF,IAArC,CAA2C,IAA3C,CAAiD,CAAC,EAAG,GAAH,CAAD,CAAU,EAAG,GAAH,CAAV,CAAjD,CAAV,CAA+E,CAC7EC,OAAO,CAAG,IAAV,CACD,CACF,CACF,CAED,MAAOA,CAAAA,OAAP,CACD,CAxBM","sourcesContent":["import {canMove} from './canMove';\r\n\r\nexport const check = function(board, turn){\r\n  var isCheck = false\r\n  var kingPos = []\r\n\r\n  /*finds position of king*/\r\n  for(let i = 0; i <= 7; i++){\r\n    for(let j = 0; j <= 7; j++){\r\n      if(board[i][j][0] !== turn[0] && board[i][j][1] === 'K'){\r\n        kingPos.push(i)\r\n        kingPos.push(j)\r\n      }\r\n    }\r\n  }\r\n\r\n  /*cycles through each piece to see if it can move to king's position*/\r\n  for(let k = 0; k <= 7; k++){\r\n    for(let m = 0; m <= 7; m++){\r\n      if(canMove(board, k, m, kingPos[0], kingPos[1],turn, true, [[, [,]], [, [,]]])){\r\n        isCheck = true\r\n      }\r\n    }\r\n  }\r\n\r\n  return isCheck\r\n}\r\n"]},"metadata":{},"sourceType":"module"}